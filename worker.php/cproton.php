<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('cproton')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_cproton.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('cproton.so')) return;
    } else {
      if (!dl('cproton.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class cproton {
	static function pn_link_send($transport,$STRING) {
		return pn_link_send($transport,$STRING);
	}

	static function pn_transport_input($transport,$STRING) {
		return pn_transport_input($transport,$STRING);
	}

	static function pn_sasl_send($sasl,$STRING) {
		return pn_sasl_send($sasl,$STRING);
	}

	static function pn_link_recv($link,$maxCount) {
		pn_link_recv($link,$maxCount);
	}

	static function pn_sasl_recv($sasl,$maxCount) {
		pn_sasl_recv($sasl,$maxCount);
	}

	static function pn_transport_output($transport,$maxCount) {
		pn_transport_output($transport,$maxCount);
	}

	static function pn_message_encode($message,$maxCount) {
		pn_message_encode($message,$maxCount);
	}

	static function pn_message_save($message,$maxCount) {
		pn_message_save($message,$maxCount);
	}

	static function pn_message_data($STRING,$count) {
		pn_message_data($STRING,$count);
	}

	static function pn_delivery($link,$STRING) {
		return pn_delivery($link,$STRING);
	}

	static function pn_delivery_tag($d) {
		pn_delivery_tag($d);
	}

	static function pn_listener($driver,$host,$port,$PHP_CONTEXT) {
		return pn_listener($driver,$host,$port,$PHP_CONTEXT);
	}

	static function pn_listener_fd($driver,$fd,$PHP_CONTEXT) {
		return pn_listener_fd($driver,$fd,$PHP_CONTEXT);
	}

	static function pn_listener_context($l) {
		return pn_listener_context($l);
	}

	static function pn_listener_set_context($l,$PHP_CONTEXT) {
		pn_listener_set_context($l,$PHP_CONTEXT);
	}

	static function pn_listener_free($l) {
		pn_listener_free($l);
	}

	static function pn_connector($driver,$host,$port,$PHP_CONTEXT) {
		return pn_connector($driver,$host,$port,$PHP_CONTEXT);
	}

	static function pn_connector_fd($driver,$fd,$PHP_CONTEXT) {
		return pn_connector_fd($driver,$fd,$PHP_CONTEXT);
	}

	static function pn_connector_context($c_) {
		return pn_connector_context($c_);
	}

	static function pn_connector_set_context($ctor,$PHP_CONTEXT) {
		pn_connector_set_context($ctor,$PHP_CONTEXT);
	}

	static function pn_connector_free($c_) {
		pn_connector_free($c_);
	}

	const PROTON_IMPORT_EXPORT_H = PROTON_IMPORT_EXPORT_H;

	const PROTON_TYPES_H = PROTON_TYPES_H;

	static function pn_bytes($size,$start) {
		$r=pn_bytes($size,$start);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_bytes_t($r);
		}
		return $r;
	}

	static function pn_bytes_dup($size,$start) {
		$r=pn_bytes_dup($size,$start);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_bytes_t($r);
		}
		return $r;
	}

	const PROTON_OBJECT_H = PROTON_OBJECT_H;

	static function pn_new($size,$clazz) {
		return pn_new($size,$clazz);
	}

	static function pn_initialize($object,$clazz) {
		pn_initialize($object,$clazz);
	}

	static function pn_incref($object) {
		return pn_incref($object);
	}

	static function pn_decref($object) {
		pn_decref($object);
	}

	static function pn_refcount($object) {
		return pn_refcount($object);
	}

	static function pn_finalize($object) {
		pn_finalize($object);
	}

	static function pn_free($object) {
		pn_free($object);
	}

	static function pn_class($object) {
		$r=pn_class($object);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_class_t($r);
		}
		return $r;
	}

	static function pn_hashcode($object) {
		return pn_hashcode($object);
	}

	static function pn_compare($a,$b) {
		return pn_compare($a,$b);
	}

	static function pn_equals($a,$b) {
		return pn_equals($a,$b);
	}

	static function pn_inspect($object,$dst) {
		return pn_inspect($object,$dst);
	}

	const PN_REFCOUNT = PN_REFCOUNT;

	static function pn_list($capacity,$options) {
		return pn_list($capacity,$options);
	}

	static function pn_list_size($list) {
		return pn_list_size($list);
	}

	static function pn_list_get($list,$index) {
		return pn_list_get($list,$index);
	}

	static function pn_list_set($list,$index,$value) {
		pn_list_set($list,$index,$value);
	}

	static function pn_list_add($list,$value) {
		return pn_list_add($list,$value);
	}

	static function pn_list_index($list,$value) {
		return pn_list_index($list,$value);
	}

	static function pn_list_remove($list,$value) {
		return pn_list_remove($list,$value);
	}

	static function pn_list_del($list,$index,$n) {
		pn_list_del($list,$index,$n);
	}

	static function pn_list_clear($list) {
		pn_list_clear($list);
	}

	static function pn_list_iterator($list,$iter) {
		pn_list_iterator($list,$iter);
	}

	const PN_REFCOUNT_KEY = PN_REFCOUNT_KEY;

	const PN_REFCOUNT_VALUE = PN_REFCOUNT_VALUE;

	static function pn_map($capacity,$load_factor,$options) {
		return pn_map($capacity,$load_factor,$options);
	}

	static function pn_map_size($map) {
		return pn_map_size($map);
	}

	static function pn_map_put($map,$key,$value) {
		return pn_map_put($map,$key,$value);
	}

	static function pn_map_get($map,$key) {
		return pn_map_get($map,$key);
	}

	static function pn_map_del($map,$key) {
		pn_map_del($map,$key);
	}

	static function pn_map_head($map) {
		return pn_map_head($map);
	}

	static function pn_map_next($map,$entry) {
		return pn_map_next($map,$entry);
	}

	static function pn_map_key($map,$entry) {
		return pn_map_key($map,$entry);
	}

	static function pn_map_value($map,$entry) {
		return pn_map_value($map,$entry);
	}

	static function pn_hash($capacity,$load_factor,$options) {
		return pn_hash($capacity,$load_factor,$options);
	}

	static function pn_hash_size($hash) {
		return pn_hash_size($hash);
	}

	static function pn_hash_put($hash,$key,$value) {
		return pn_hash_put($hash,$key,$value);
	}

	static function pn_hash_get($hash,$key) {
		return pn_hash_get($hash,$key);
	}

	static function pn_hash_del($hash,$key) {
		pn_hash_del($hash,$key);
	}

	static function pn_hash_head($hash) {
		return pn_hash_head($hash);
	}

	static function pn_hash_next($hash,$entry) {
		return pn_hash_next($hash,$entry);
	}

	static function pn_hash_key($hash,$entry) {
		return pn_hash_key($hash,$entry);
	}

	static function pn_hash_value($hash,$entry) {
		return pn_hash_value($hash,$entry);
	}

	static function pn_string($bytes) {
		return pn_string($bytes);
	}

	static function pn_stringn($bytes,$n) {
		return pn_stringn($bytes,$n);
	}

	static function pn_string_get($string) {
		return pn_string_get($string);
	}

	static function pn_string_size($string) {
		return pn_string_size($string);
	}

	static function pn_string_set($string,$bytes) {
		return pn_string_set($string,$bytes);
	}

	static function pn_string_setn($string,$bytes,$n) {
		return pn_string_setn($string,$bytes,$n);
	}

	static function pn_string_put($string,$dst) {
		return pn_string_put($string,$dst);
	}

	static function pn_string_clear($string) {
		pn_string_clear($string);
	}

	static function pn_string_format($string,$format) {
		return pn_string_format($string,$format);
	}

	static function pn_string_addf($string,$format) {
		return pn_string_addf($string,$format);
	}

	static function pn_string_grow($string,$capacity) {
		return pn_string_grow($string,$capacity);
	}

	static function pn_string_buffer($string) {
		return pn_string_buffer($string);
	}

	static function pn_string_capacity($string) {
		return pn_string_capacity($string);
	}

	static function pn_string_resize($string,$size) {
		return pn_string_resize($string,$size);
	}

	static function pn_string_copy($string,$src) {
		return pn_string_copy($string,$src);
	}

	static function pn_iterator() {
		return pn_iterator();
	}

	static function pn_iterator_start($iterator,$next,$size) {
		return pn_iterator_start($iterator,$next,$size);
	}

	static function pn_iterator_next($iterator) {
		return pn_iterator_next($iterator);
	}

	const PROTON_ERROR_H = PROTON_ERROR_H;

	const PN_EOS = PN_EOS;

	const PN_ERR = PN_ERR;

	const PN_OVERFLOW = PN_OVERFLOW;

	const PN_UNDERFLOW = PN_UNDERFLOW;

	const PN_STATE_ERR = PN_STATE_ERR;

	const PN_ARG_ERR = PN_ARG_ERR;

	const PN_TIMEOUT = PN_TIMEOUT;

	const PN_INTR = PN_INTR;

	const PN_INPROGRESS = PN_INPROGRESS;

	static function pn_code($code) {
		return pn_code($code);
	}

	static function pn_error() {
		return pn_error();
	}

	static function pn_error_free($error) {
		pn_error_free($error);
	}

	static function pn_error_clear($error) {
		pn_error_clear($error);
	}

	static function pn_error_set($error,$code,$text) {
		return pn_error_set($error,$code,$text);
	}

	static function pn_error_code($error) {
		return pn_error_code($error);
	}

	static function pn_error_text($error) {
		return pn_error_text($error);
	}

	static function pn_error_copy($error,$src) {
		return pn_error_copy($error,$src);
	}

	const PROTON_CONDITION_H = PROTON_CONDITION_H;

	static function pn_condition_is_set($condition) {
		return pn_condition_is_set($condition);
	}

	static function pn_condition_clear($condition) {
		pn_condition_clear($condition);
	}

	static function pn_condition_get_name($condition) {
		return pn_condition_get_name($condition);
	}

	static function pn_condition_set_name($condition,$name) {
		return pn_condition_set_name($condition,$name);
	}

	static function pn_condition_get_description($condition) {
		return pn_condition_get_description($condition);
	}

	static function pn_condition_set_description($condition,$description) {
		return pn_condition_set_description($condition,$description);
	}

	static function pn_condition_info($condition) {
		return pn_condition_info($condition);
	}

	static function pn_condition_is_redirect($condition) {
		return pn_condition_is_redirect($condition);
	}

	static function pn_condition_redirect_host($condition) {
		return pn_condition_redirect_host($condition);
	}

	static function pn_condition_redirect_port($condition) {
		return pn_condition_redirect_port($condition);
	}

	const PROTON_CONNECTION_H = PROTON_CONNECTION_H;

	const PN_LOCAL_UNINIT = PN_LOCAL_UNINIT;

	const PN_LOCAL_ACTIVE = PN_LOCAL_ACTIVE;

	const PN_LOCAL_CLOSED = PN_LOCAL_CLOSED;

	const PN_REMOTE_UNINIT = PN_REMOTE_UNINIT;

	const PN_REMOTE_ACTIVE = PN_REMOTE_ACTIVE;

	const PN_REMOTE_CLOSED = PN_REMOTE_CLOSED;

	const PN_LOCAL_MASK = PN_LOCAL_MASK;

	const PN_REMOTE_MASK = PN_REMOTE_MASK;

	static function pn_connection() {
		return pn_connection();
	}

	static function pn_connection_free($connection) {
		pn_connection_free($connection);
	}

	static function pn_connection_error($connection) {
		return pn_connection_error($connection);
	}

	static function pn_connection_collect($connection,$collector) {
		pn_connection_collect($connection,$collector);
	}

	static function pn_connection_get_context($connection) {
		return pn_connection_get_context($connection);
	}

	static function pn_connection_set_context($connection,$context) {
		pn_connection_set_context($connection,$context);
	}

	static function pn_connection_state($connection) {
		return pn_connection_state($connection);
	}

	static function pn_connection_open($connection) {
		pn_connection_open($connection);
	}

	static function pn_connection_close($connection) {
		pn_connection_close($connection);
	}

	static function pn_connection_reset($connection) {
		pn_connection_reset($connection);
	}

	static function pn_connection_condition($connection) {
		return pn_connection_condition($connection);
	}

	static function pn_connection_remote_condition($connection) {
		return pn_connection_remote_condition($connection);
	}

	static function pn_connection_get_container($connection) {
		return pn_connection_get_container($connection);
	}

	static function pn_connection_set_container($connection,$container) {
		pn_connection_set_container($connection,$container);
	}

	static function pn_connection_get_hostname($connection) {
		return pn_connection_get_hostname($connection);
	}

	static function pn_connection_set_hostname($connection,$hostname) {
		pn_connection_set_hostname($connection,$hostname);
	}

	static function pn_connection_remote_container($connection) {
		return pn_connection_remote_container($connection);
	}

	static function pn_connection_remote_hostname($connection) {
		return pn_connection_remote_hostname($connection);
	}

	static function pn_connection_offered_capabilities($connection) {
		return pn_connection_offered_capabilities($connection);
	}

	static function pn_connection_desired_capabilities($connection) {
		return pn_connection_desired_capabilities($connection);
	}

	static function pn_connection_properties($connection) {
		return pn_connection_properties($connection);
	}

	static function pn_connection_remote_offered_capabilities($connection) {
		return pn_connection_remote_offered_capabilities($connection);
	}

	static function pn_connection_remote_desired_capabilities($connection) {
		return pn_connection_remote_desired_capabilities($connection);
	}

	static function pn_connection_remote_properties($connection) {
		return pn_connection_remote_properties($connection);
	}

	static function pn_connection_transport($connection) {
		return pn_connection_transport($connection);
	}

	const PROTON_SESSION_H = PROTON_SESSION_H;

	static function pn_session($connection) {
		return pn_session($connection);
	}

	static function pn_session_free($session) {
		pn_session_free($session);
	}

	static function pn_session_get_context($session) {
		return pn_session_get_context($session);
	}

	static function pn_session_set_context($session,$context) {
		pn_session_set_context($session,$context);
	}

	static function pn_session_state($session) {
		return pn_session_state($session);
	}

	static function pn_session_error($session) {
		return pn_session_error($session);
	}

	static function pn_session_condition($session) {
		return pn_session_condition($session);
	}

	static function pn_session_remote_condition($session) {
		return pn_session_remote_condition($session);
	}

	static function pn_session_connection($session) {
		return pn_session_connection($session);
	}

	static function pn_session_open($session) {
		pn_session_open($session);
	}

	static function pn_session_close($session) {
		pn_session_close($session);
	}

	static function pn_session_get_incoming_capacity($session) {
		return pn_session_get_incoming_capacity($session);
	}

	static function pn_session_set_incoming_capacity($session,$capacity) {
		pn_session_set_incoming_capacity($session,$capacity);
	}

	static function pn_session_outgoing_bytes($session) {
		return pn_session_outgoing_bytes($session);
	}

	static function pn_session_incoming_bytes($session) {
		return pn_session_incoming_bytes($session);
	}

	static function pn_session_head($connection,$state) {
		return pn_session_head($connection,$state);
	}

	static function pn_session_next($session,$state) {
		return pn_session_next($session,$state);
	}

	const PROTON_LINK_H = PROTON_LINK_H;

	static function pn_sender($session,$name) {
		return pn_sender($session,$name);
	}

	static function pn_receiver($session,$name) {
		return pn_receiver($session,$name);
	}

	static function pn_link_free($link) {
		pn_link_free($link);
	}

	static function pn_link_get_context($link) {
		return pn_link_get_context($link);
	}

	static function pn_link_set_context($link,$context) {
		pn_link_set_context($link,$context);
	}

	static function pn_link_name($link) {
		return pn_link_name($link);
	}

	static function pn_link_is_sender($link) {
		return pn_link_is_sender($link);
	}

	static function pn_link_is_receiver($link) {
		return pn_link_is_receiver($link);
	}

	static function pn_link_state($link) {
		return pn_link_state($link);
	}

	static function pn_link_error($link) {
		return pn_link_error($link);
	}

	static function pn_link_condition($link) {
		return pn_link_condition($link);
	}

	static function pn_link_remote_condition($link) {
		return pn_link_remote_condition($link);
	}

	static function pn_link_session($link) {
		return pn_link_session($link);
	}

	static function pn_link_head($connection,$state) {
		return pn_link_head($connection,$state);
	}

	static function pn_link_next($link,$state) {
		return pn_link_next($link,$state);
	}

	static function pn_link_open($link) {
		pn_link_open($link);
	}

	static function pn_link_close($link) {
		pn_link_close($link);
	}

	static function pn_link_source($link) {
		return pn_link_source($link);
	}

	static function pn_link_target($link) {
		return pn_link_target($link);
	}

	static function pn_link_remote_source($link) {
		return pn_link_remote_source($link);
	}

	static function pn_link_remote_target($link) {
		return pn_link_remote_target($link);
	}

	static function pn_link_current($link) {
		return pn_link_current($link);
	}

	static function pn_link_advance($link) {
		return pn_link_advance($link);
	}

	static function pn_link_credit($link) {
		return pn_link_credit($link);
	}

	static function pn_link_queued($link) {
		return pn_link_queued($link);
	}

	static function pn_link_remote_credit($link) {
		return pn_link_remote_credit($link);
	}

	static function pn_link_get_drain($link) {
		return pn_link_get_drain($link);
	}

	static function pn_link_drained($link) {
		return pn_link_drained($link);
	}

	static function pn_link_available($link) {
		return pn_link_available($link);
	}

	const PN_SND_UNSETTLED = 0;

	const PN_SND_SETTLED = 1;

	const PN_SND_MIXED = 2;

	const PN_RCV_FIRST = 0;

	const PN_RCV_SECOND = 1;

	static function pn_link_snd_settle_mode($link) {
		return pn_link_snd_settle_mode($link);
	}

	static function pn_link_rcv_settle_mode($link) {
		return pn_link_rcv_settle_mode($link);
	}

	static function pn_link_set_snd_settle_mode($link,$mode) {
		pn_link_set_snd_settle_mode($link,$mode);
	}

	static function pn_link_set_rcv_settle_mode($link,$mode) {
		pn_link_set_rcv_settle_mode($link,$mode);
	}

	static function pn_link_remote_snd_settle_mode($link) {
		return pn_link_remote_snd_settle_mode($link);
	}

	static function pn_link_remote_rcv_settle_mode($link) {
		return pn_link_remote_rcv_settle_mode($link);
	}

	static function pn_link_unsettled($link) {
		return pn_link_unsettled($link);
	}

	static function pn_unsettled_head($link) {
		return pn_unsettled_head($link);
	}

	static function pn_unsettled_next($delivery) {
		return pn_unsettled_next($delivery);
	}

	static function pn_link_offered($sender,$credit) {
		pn_link_offered($sender,$credit);
	}

	static function pn_link_flow($receiver,$credit) {
		pn_link_flow($receiver,$credit);
	}

	static function pn_link_drain($receiver,$credit) {
		pn_link_drain($receiver,$credit);
	}

	static function pn_link_set_drain($receiver,$drain) {
		pn_link_set_drain($receiver,$drain);
	}

	static function pn_link_draining($receiver) {
		return pn_link_draining($receiver);
	}

	const PROTON_TERMINUS_H = PROTON_TERMINUS_H;

	const PN_UNSPECIFIED = 0;

	const PN_SOURCE = 1;

	const PN_TARGET = 2;

	const PN_COORDINATOR = 3;

	const PN_NONDURABLE = 0;

	const PN_CONFIGURATION = 1;

	const PN_DELIVERIES = 2;

	const PN_LINK_CLOSE = 0;

	const PN_SESSION_CLOSE = PN_SESSION_CLOSE;

	const PN_CONNECTION_CLOSE = PN_CONNECTION_CLOSE;

	const PN_NEVER = PN_NEVER;

	const PN_DIST_MODE_UNSPECIFIED = 0;

	const PN_DIST_MODE_COPY = 1;

	const PN_DIST_MODE_MOVE = 2;

	static function pn_terminus_get_type($terminus) {
		return pn_terminus_get_type($terminus);
	}

	static function pn_terminus_set_type($terminus,$type) {
		return pn_terminus_set_type($terminus,$type);
	}

	static function pn_terminus_get_address($terminus) {
		return pn_terminus_get_address($terminus);
	}

	static function pn_terminus_set_address($terminus,$address) {
		return pn_terminus_set_address($terminus,$address);
	}

	static function pn_terminus_get_distribution_mode($terminus) {
		return pn_terminus_get_distribution_mode($terminus);
	}

	static function pn_terminus_set_distribution_mode($terminus,$mode) {
		return pn_terminus_set_distribution_mode($terminus,$mode);
	}

	static function pn_terminus_get_durability($terminus) {
		return pn_terminus_get_durability($terminus);
	}

	static function pn_terminus_set_durability($terminus,$durability) {
		return pn_terminus_set_durability($terminus,$durability);
	}

	static function pn_terminus_get_expiry_policy($terminus) {
		return pn_terminus_get_expiry_policy($terminus);
	}

	static function pn_terminus_set_expiry_policy($terminus,$policy) {
		return pn_terminus_set_expiry_policy($terminus,$policy);
	}

	static function pn_terminus_get_timeout($terminus) {
		return pn_terminus_get_timeout($terminus);
	}

	static function pn_terminus_set_timeout($terminus,$timeout) {
		return pn_terminus_set_timeout($terminus,$timeout);
	}

	static function pn_terminus_is_dynamic($terminus) {
		return pn_terminus_is_dynamic($terminus);
	}

	static function pn_terminus_set_dynamic($terminus,$dynamic) {
		return pn_terminus_set_dynamic($terminus,$dynamic);
	}

	static function pn_terminus_properties($terminus) {
		return pn_terminus_properties($terminus);
	}

	static function pn_terminus_capabilities($terminus) {
		return pn_terminus_capabilities($terminus);
	}

	static function pn_terminus_outcomes($terminus) {
		return pn_terminus_outcomes($terminus);
	}

	static function pn_terminus_filter($terminus) {
		return pn_terminus_filter($terminus);
	}

	static function pn_terminus_copy($terminus,$src) {
		return pn_terminus_copy($terminus,$src);
	}

	const PROTON_DELIVERY_H = PROTON_DELIVERY_H;

	static function pn_delivery_get_context($delivery) {
		return pn_delivery_get_context($delivery);
	}

	static function pn_delivery_set_context($delivery,$context) {
		pn_delivery_set_context($delivery,$context);
	}

	static function pn_delivery_link($delivery) {
		return pn_delivery_link($delivery);
	}

	static function pn_delivery_local($delivery) {
		return pn_delivery_local($delivery);
	}

	static function pn_delivery_local_state($delivery) {
		return pn_delivery_local_state($delivery);
	}

	static function pn_delivery_remote($delivery) {
		return pn_delivery_remote($delivery);
	}

	static function pn_delivery_remote_state($delivery) {
		return pn_delivery_remote_state($delivery);
	}

	static function pn_delivery_settled($delivery) {
		return pn_delivery_settled($delivery);
	}

	static function pn_delivery_pending($delivery) {
		return pn_delivery_pending($delivery);
	}

	static function pn_delivery_partial($delivery) {
		return pn_delivery_partial($delivery);
	}

	static function pn_delivery_writable($delivery) {
		return pn_delivery_writable($delivery);
	}

	static function pn_delivery_readable($delivery) {
		return pn_delivery_readable($delivery);
	}

	static function pn_delivery_updated($delivery) {
		return pn_delivery_updated($delivery);
	}

	static function pn_delivery_update($delivery,$state) {
		pn_delivery_update($delivery,$state);
	}

	static function pn_delivery_clear($delivery) {
		pn_delivery_clear($delivery);
	}

	static function pn_delivery_settle($delivery) {
		pn_delivery_settle($delivery);
	}

	static function pn_delivery_dump($delivery) {
		pn_delivery_dump($delivery);
	}

	static function pn_delivery_buffered($delivery) {
		return pn_delivery_buffered($delivery);
	}

	static function pn_work_head($connection) {
		return pn_work_head($connection);
	}

	static function pn_work_next($delivery) {
		return pn_work_next($delivery);
	}

	const PROTON_DISPOSITION_H = PROTON_DISPOSITION_H;

	const PN_RECEIVED = PN_RECEIVED;

	const PN_ACCEPTED = PN_ACCEPTED;

	const PN_REJECTED = PN_REJECTED;

	const PN_RELEASED = PN_RELEASED;

	const PN_MODIFIED = PN_MODIFIED;

	static function pn_disposition_type($disposition) {
		return pn_disposition_type($disposition);
	}

	static function pn_disposition_condition($disposition) {
		return pn_disposition_condition($disposition);
	}

	static function pn_disposition_data($disposition) {
		return pn_disposition_data($disposition);
	}

	static function pn_disposition_get_section_number($disposition) {
		return pn_disposition_get_section_number($disposition);
	}

	static function pn_disposition_set_section_number($disposition,$section_number) {
		pn_disposition_set_section_number($disposition,$section_number);
	}

	static function pn_disposition_get_section_offset($disposition) {
		return pn_disposition_get_section_offset($disposition);
	}

	static function pn_disposition_set_section_offset($disposition,$section_offset) {
		pn_disposition_set_section_offset($disposition,$section_offset);
	}

	static function pn_disposition_is_failed($disposition) {
		return pn_disposition_is_failed($disposition);
	}

	static function pn_disposition_set_failed($disposition,$failed) {
		pn_disposition_set_failed($disposition,$failed);
	}

	static function pn_disposition_is_undeliverable($disposition) {
		return pn_disposition_is_undeliverable($disposition);
	}

	static function pn_disposition_set_undeliverable($disposition,$undeliverable) {
		pn_disposition_set_undeliverable($disposition,$undeliverable);
	}

	static function pn_disposition_annotations($disposition) {
		return pn_disposition_annotations($disposition);
	}

	const PROTON_TRANSPORT_H = PROTON_TRANSPORT_H;

	const PN_TRACE_OFF = PN_TRACE_OFF;

	const PN_TRACE_RAW = PN_TRACE_RAW;

	const PN_TRACE_FRM = PN_TRACE_FRM;

	const PN_TRACE_DRV = PN_TRACE_DRV;

	static function pn_transport() {
		return pn_transport();
	}

	static function pn_transport_free($transport) {
		pn_transport_free($transport);
	}

	static function pn_transport_error($transport) {
		return pn_transport_error($transport);
	}

	static function pn_transport_bind($transport,$connection) {
		return pn_transport_bind($transport,$connection);
	}

	static function pn_transport_unbind($transport) {
		return pn_transport_unbind($transport);
	}

	static function pn_transport_trace($transport,$trace) {
		pn_transport_trace($transport,$trace);
	}

	static function pn_transport_set_tracer($transport,$tracer) {
		pn_transport_set_tracer($transport,$tracer);
	}

	static function pn_transport_get_tracer($transport) {
		return pn_transport_get_tracer($transport);
	}

	static function pn_transport_get_context($transport) {
		return pn_transport_get_context($transport);
	}

	static function pn_transport_set_context($transport,$context) {
		pn_transport_set_context($transport,$context);
	}

	static function pn_transport_log($transport,$message) {
		pn_transport_log($transport,$message);
	}

	static function pn_transport_logf($transport,$fmt) {
		pn_transport_logf($transport,$fmt);
	}

	static function pn_transport_get_channel_max($transport) {
		return pn_transport_get_channel_max($transport);
	}

	static function pn_transport_set_channel_max($transport,$channel_max) {
		pn_transport_set_channel_max($transport,$channel_max);
	}

	static function pn_transport_remote_channel_max($transport) {
		return pn_transport_remote_channel_max($transport);
	}

	static function pn_transport_get_max_frame($transport) {
		return pn_transport_get_max_frame($transport);
	}

	static function pn_transport_set_max_frame($transport,$size) {
		pn_transport_set_max_frame($transport,$size);
	}

	static function pn_transport_get_remote_max_frame($transport) {
		return pn_transport_get_remote_max_frame($transport);
	}

	static function pn_transport_get_idle_timeout($transport) {
		return pn_transport_get_idle_timeout($transport);
	}

	static function pn_transport_set_idle_timeout($transport,$timeout) {
		pn_transport_set_idle_timeout($transport,$timeout);
	}

	static function pn_transport_get_remote_idle_timeout($transport) {
		return pn_transport_get_remote_idle_timeout($transport);
	}

	static function pn_transport_capacity($transport) {
		return pn_transport_capacity($transport);
	}

	static function pn_transport_tail($transport) {
		return pn_transport_tail($transport);
	}

	static function pn_transport_push($transport,$src,$size) {
		return pn_transport_push($transport,$src,$size);
	}

	static function pn_transport_process($transport,$size) {
		return pn_transport_process($transport,$size);
	}

	static function pn_transport_close_tail($transport) {
		return pn_transport_close_tail($transport);
	}

	static function pn_transport_pending($transport) {
		return pn_transport_pending($transport);
	}

	static function pn_transport_head($transport) {
		return pn_transport_head($transport);
	}

	static function pn_transport_peek($transport,$dst,$size) {
		return pn_transport_peek($transport,$dst,$size);
	}

	static function pn_transport_pop($transport,$size) {
		pn_transport_pop($transport,$size);
	}

	static function pn_transport_close_head($transport) {
		return pn_transport_close_head($transport);
	}

	static function pn_transport_quiesced($transport) {
		return pn_transport_quiesced($transport);
	}

	static function pn_transport_closed($transport) {
		return pn_transport_closed($transport);
	}

	static function pn_transport_tick($transport,$now) {
		return pn_transport_tick($transport,$now);
	}

	static function pn_transport_get_frames_output($transport) {
		return pn_transport_get_frames_output($transport);
	}

	static function pn_transport_get_frames_input($transport) {
		return pn_transport_get_frames_input($transport);
	}

	const PROTON_EVENT_H = PROTON_EVENT_H;

	const PN_EVENT_CATEGORY_NONE = 0;

	const PN_EVENT_CATEGORY_PROTOCOL = PN_EVENT_CATEGORY_PROTOCOL;

	const PN_EVENT_CATEGORY_COUNT = 2;

	const PN_EVENT_NONE = 0;

	const PN_CONNECTION_REMOTE_STATE = PN_CONNECTION_REMOTE_STATE;

	const PN_CONNECTION_LOCAL_STATE = PN_CONNECTION_LOCAL_STATE;

	const PN_SESSION_REMOTE_STATE = PN_SESSION_REMOTE_STATE;

	const PN_SESSION_LOCAL_STATE = PN_SESSION_LOCAL_STATE;

	const PN_LINK_REMOTE_STATE = PN_LINK_REMOTE_STATE;

	const PN_LINK_LOCAL_STATE = PN_LINK_LOCAL_STATE;

	const PN_LINK_FLOW = PN_LINK_FLOW;

	const PN_DELIVERY = PN_DELIVERY;

	const PN_TRANSPORT = PN_TRANSPORT;

	static function pn_event_type_name($type) {
		return pn_event_type_name($type);
	}

	static function pn_collector() {
		return pn_collector();
	}

	static function pn_collector_free($collector) {
		pn_collector_free($collector);
	}

	static function pn_collector_peek($collector) {
		return pn_collector_peek($collector);
	}

	static function pn_collector_pop($collector) {
		return pn_collector_pop($collector);
	}

	static function pn_event_type($event) {
		return pn_event_type($event);
	}

	static function pn_event_category($event) {
		return pn_event_category($event);
	}

	static function pn_event_connection($event) {
		return pn_event_connection($event);
	}

	static function pn_event_session($event) {
		return pn_event_session($event);
	}

	static function pn_event_link($event) {
		return pn_event_link($event);
	}

	static function pn_event_delivery($event) {
		return pn_event_delivery($event);
	}

	static function pn_event_transport($event) {
		return pn_event_transport($event);
	}

	const PROTON_MESSAGE_H = PROTON_MESSAGE_H;

	const PN_DATA = 0;

	const PN_TEXT = PN_TEXT;

	const PN_AMQP = PN_AMQP;

	const PN_JSON = PN_JSON;

	const PN_DEFAULT_PRIORITY = PN_DEFAULT_PRIORITY;

	static function pn_message() {
		return pn_message();
	}

	static function pn_message_free($msg) {
		pn_message_free($msg);
	}

	static function pn_message_clear($msg) {
		pn_message_clear($msg);
	}

	static function pn_message_errno($msg) {
		return pn_message_errno($msg);
	}

	static function pn_message_error($msg) {
		return pn_message_error($msg);
	}

	static function pn_message_is_inferred($msg) {
		return pn_message_is_inferred($msg);
	}

	static function pn_message_set_inferred($msg,$inferred) {
		return pn_message_set_inferred($msg,$inferred);
	}

	static function pn_message_is_durable($msg) {
		return pn_message_is_durable($msg);
	}

	static function pn_message_set_durable($msg,$durable) {
		return pn_message_set_durable($msg,$durable);
	}

	static function pn_message_get_priority($msg) {
		return pn_message_get_priority($msg);
	}

	static function pn_message_set_priority($msg,$priority) {
		return pn_message_set_priority($msg,$priority);
	}

	static function pn_message_get_ttl($msg) {
		return pn_message_get_ttl($msg);
	}

	static function pn_message_set_ttl($msg,$ttl) {
		return pn_message_set_ttl($msg,$ttl);
	}

	static function pn_message_is_first_acquirer($msg) {
		return pn_message_is_first_acquirer($msg);
	}

	static function pn_message_set_first_acquirer($msg,$first) {
		return pn_message_set_first_acquirer($msg,$first);
	}

	static function pn_message_get_delivery_count($msg) {
		return pn_message_get_delivery_count($msg);
	}

	static function pn_message_set_delivery_count($msg,$count) {
		return pn_message_set_delivery_count($msg,$count);
	}

	static function pn_message_id($msg) {
		return pn_message_id($msg);
	}

	static function pn_message_get_id($msg) {
		$r=pn_message_get_id($msg);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_atom_t($r);
		}
		return $r;
	}

	static function pn_message_set_id($msg,$id) {
		return pn_message_set_id($msg,$id);
	}

	static function pn_message_get_user_id($msg) {
		$r=pn_message_get_user_id($msg);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_bytes_t($r);
		}
		return $r;
	}

	static function pn_message_set_user_id($msg,$user_id) {
		return pn_message_set_user_id($msg,$user_id);
	}

	static function pn_message_get_address($msg) {
		return pn_message_get_address($msg);
	}

	static function pn_message_set_address($msg,$address) {
		return pn_message_set_address($msg,$address);
	}

	static function pn_message_get_subject($msg) {
		return pn_message_get_subject($msg);
	}

	static function pn_message_set_subject($msg,$subject) {
		return pn_message_set_subject($msg,$subject);
	}

	static function pn_message_get_reply_to($msg) {
		return pn_message_get_reply_to($msg);
	}

	static function pn_message_set_reply_to($msg,$reply_to) {
		return pn_message_set_reply_to($msg,$reply_to);
	}

	static function pn_message_correlation_id($msg) {
		return pn_message_correlation_id($msg);
	}

	static function pn_message_get_correlation_id($msg) {
		$r=pn_message_get_correlation_id($msg);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_atom_t($r);
		}
		return $r;
	}

	static function pn_message_set_correlation_id($msg,$id) {
		return pn_message_set_correlation_id($msg,$id);
	}

	static function pn_message_get_content_type($msg) {
		return pn_message_get_content_type($msg);
	}

	static function pn_message_set_content_type($msg,$type) {
		return pn_message_set_content_type($msg,$type);
	}

	static function pn_message_get_content_encoding($msg) {
		return pn_message_get_content_encoding($msg);
	}

	static function pn_message_set_content_encoding($msg,$encoding) {
		return pn_message_set_content_encoding($msg,$encoding);
	}

	static function pn_message_get_expiry_time($msg) {
		return pn_message_get_expiry_time($msg);
	}

	static function pn_message_set_expiry_time($msg,$time) {
		return pn_message_set_expiry_time($msg,$time);
	}

	static function pn_message_get_creation_time($msg) {
		return pn_message_get_creation_time($msg);
	}

	static function pn_message_set_creation_time($msg,$time) {
		return pn_message_set_creation_time($msg,$time);
	}

	static function pn_message_get_group_id($msg) {
		return pn_message_get_group_id($msg);
	}

	static function pn_message_set_group_id($msg,$group_id) {
		return pn_message_set_group_id($msg,$group_id);
	}

	static function pn_message_get_group_sequence($msg) {
		return pn_message_get_group_sequence($msg);
	}

	static function pn_message_set_group_sequence($msg,$n) {
		return pn_message_set_group_sequence($msg,$n);
	}

	static function pn_message_get_reply_to_group_id($msg) {
		return pn_message_get_reply_to_group_id($msg);
	}

	static function pn_message_set_reply_to_group_id($msg,$reply_to_group_id) {
		return pn_message_set_reply_to_group_id($msg,$reply_to_group_id);
	}

	static function pn_message_get_format($message) {
		return pn_message_get_format($message);
	}

	static function pn_message_set_format($message,$format) {
		return pn_message_set_format($message,$format);
	}

	static function pn_message_load($message,$data,$size) {
		return pn_message_load($message,$data,$size);
	}

	static function pn_message_load_data($message,$data,$size) {
		return pn_message_load_data($message,$data,$size);
	}

	static function pn_message_load_text($message,$data,$size) {
		return pn_message_load_text($message,$data,$size);
	}

	static function pn_message_load_amqp($message,$data,$size) {
		return pn_message_load_amqp($message,$data,$size);
	}

	static function pn_message_load_json($message,$data,$size) {
		return pn_message_load_json($message,$data,$size);
	}

	static function pn_message_save_data($message,$data,$size) {
		return pn_message_save_data($message,$data,$size);
	}

	static function pn_message_save_text($message,$data,$size) {
		return pn_message_save_text($message,$data,$size);
	}

	static function pn_message_save_amqp($message,$data,$size) {
		return pn_message_save_amqp($message,$data,$size);
	}

	static function pn_message_save_json($message,$data,$size) {
		return pn_message_save_json($message,$data,$size);
	}

	static function pn_message_instructions($msg) {
		return pn_message_instructions($msg);
	}

	static function pn_message_annotations($msg) {
		return pn_message_annotations($msg);
	}

	static function pn_message_properties($msg) {
		return pn_message_properties($msg);
	}

	static function pn_message_body($msg) {
		return pn_message_body($msg);
	}

	static function pn_message_decode($msg,$bytes,$size) {
		return pn_message_decode($msg,$bytes,$size);
	}

	const PROTON_SASL_H = PROTON_SASL_H;

	const PN_SASL_NONE = -1;

	const PN_SASL_OK = 0;

	const PN_SASL_AUTH = 1;

	const PN_SASL_SYS = 2;

	const PN_SASL_PERM = 3;

	const PN_SASL_TEMP = 4;

	const PN_SASL_CONF = 0;

	const PN_SASL_IDLE = PN_SASL_IDLE;

	const PN_SASL_STEP = PN_SASL_STEP;

	const PN_SASL_PASS = PN_SASL_PASS;

	const PN_SASL_FAIL = PN_SASL_FAIL;

	static function pn_sasl($transport) {
		return pn_sasl($transport);
	}

	static function pn_sasl_state($sasl) {
		return pn_sasl_state($sasl);
	}

	static function pn_sasl_mechanisms($sasl,$mechanisms) {
		pn_sasl_mechanisms($sasl,$mechanisms);
	}

	static function pn_sasl_remote_mechanisms($sasl) {
		return pn_sasl_remote_mechanisms($sasl);
	}

	static function pn_sasl_client($sasl) {
		pn_sasl_client($sasl);
	}

	static function pn_sasl_server($sasl) {
		pn_sasl_server($sasl);
	}

	static function pn_sasl_plain($sasl,$username,$password) {
		pn_sasl_plain($sasl,$username,$password);
	}

	static function pn_sasl_pending($sasl) {
		return pn_sasl_pending($sasl);
	}

	static function pn_sasl_done($sasl,$outcome) {
		pn_sasl_done($sasl,$outcome);
	}

	static function pn_sasl_outcome($sasl) {
		return pn_sasl_outcome($sasl);
	}

	const PROTON_DRIVER_H = PROTON_DRIVER_H;

	const PN_CONNECTOR_WRITABLE = 0;

	const PN_CONNECTOR_READABLE = PN_CONNECTOR_READABLE;

	static function pn_driver() {
		return pn_driver();
	}

	static function pn_driver_errno($d) {
		return pn_driver_errno($d);
	}

	static function pn_driver_error($d) {
		return pn_driver_error($d);
	}

	static function pn_driver_trace($driver,$trace) {
		pn_driver_trace($driver,$trace);
	}

	static function pn_driver_wakeup($driver) {
		return pn_driver_wakeup($driver);
	}

	static function pn_driver_wait($driver,$timeout) {
		return pn_driver_wait($driver,$timeout);
	}

	static function pn_driver_listener($driver) {
		return pn_driver_listener($driver);
	}

	static function pn_driver_connector($driver) {
		return pn_driver_connector($driver);
	}

	static function pn_driver_free($driver) {
		pn_driver_free($driver);
	}

	static function pn_listener_head($driver) {
		return pn_listener_head($driver);
	}

	static function pn_listener_next($listener) {
		return pn_listener_next($listener);
	}

	static function pn_listener_trace($listener,$trace) {
		pn_listener_trace($listener,$trace);
	}

	static function pn_listener_accept($listener) {
		return pn_listener_accept($listener);
	}

	static function pn_listener_close($listener) {
		pn_listener_close($listener);
	}

	static function pn_connector_head($driver) {
		return pn_connector_head($driver);
	}

	static function pn_connector_next($connector) {
		return pn_connector_next($connector);
	}

	static function pn_connector_trace($connector,$trace) {
		pn_connector_trace($connector,$trace);
	}

	static function pn_connector_process($connector) {
		pn_connector_process($connector);
	}

	static function pn_connector_listener($connector) {
		return pn_connector_listener($connector);
	}

	static function pn_connector_sasl($connector) {
		return pn_connector_sasl($connector);
	}

	static function pn_connector_connection($connector) {
		return pn_connector_connection($connector);
	}

	static function pn_connector_set_connection($connector,$connection) {
		pn_connector_set_connection($connector,$connection);
	}

	static function pn_connector_name($connector) {
		return pn_connector_name($connector);
	}

	static function pn_connector_transport($connector) {
		return pn_connector_transport($connector);
	}

	static function pn_connector_close($connector) {
		pn_connector_close($connector);
	}

	static function pn_connector_closed($connector) {
		return pn_connector_closed($connector);
	}

	static function pn_connector_activate($connector,$criteria) {
		pn_connector_activate($connector,$criteria);
	}

	static function pn_connector_activated($connector,$criteria) {
		return pn_connector_activated($connector,$criteria);
	}

	const PROTON_DRIVER_H_EXTRAS = PROTON_DRIVER_H_EXTRAS;

	static function pn_listener_get_fd($listener) {
		return pn_listener_get_fd($listener);
	}

	static function pn_connector_get_fd($connector) {
		return pn_connector_get_fd($connector);
	}

	const PROTON_MESSENGER_H = PROTON_MESSENGER_H;

	const PN_STATUS_UNKNOWN = 0;

	const PN_STATUS_PENDING = 1;

	const PN_STATUS_ACCEPTED = 2;

	const PN_STATUS_REJECTED = 3;

	const PN_STATUS_RELEASED = 4;

	const PN_STATUS_MODIFIED = 5;

	const PN_STATUS_ABORTED = 6;

	const PN_STATUS_SETTLED = 7;

	static function pn_messenger($name) {
		return pn_messenger($name);
	}

	static function pn_messenger_name($messenger) {
		return pn_messenger_name($messenger);
	}

	static function pn_messenger_set_certificate($messenger,$certificate) {
		return pn_messenger_set_certificate($messenger,$certificate);
	}

	static function pn_messenger_get_certificate($messenger) {
		return pn_messenger_get_certificate($messenger);
	}

	static function pn_messenger_set_private_key($messenger,$private_key) {
		return pn_messenger_set_private_key($messenger,$private_key);
	}

	static function pn_messenger_get_private_key($messenger) {
		return pn_messenger_get_private_key($messenger);
	}

	static function pn_messenger_set_password($messenger,$password) {
		return pn_messenger_set_password($messenger,$password);
	}

	static function pn_messenger_get_password($messenger) {
		return pn_messenger_get_password($messenger);
	}

	static function pn_messenger_set_trusted_certificates($messenger,$cert_db) {
		return pn_messenger_set_trusted_certificates($messenger,$cert_db);
	}

	static function pn_messenger_get_trusted_certificates($messenger) {
		return pn_messenger_get_trusted_certificates($messenger);
	}

	static function pn_messenger_set_timeout($messenger,$timeout) {
		return pn_messenger_set_timeout($messenger,$timeout);
	}

	static function pn_messenger_get_timeout($messenger) {
		return pn_messenger_get_timeout($messenger);
	}

	static function pn_messenger_is_blocking($messenger) {
		return pn_messenger_is_blocking($messenger);
	}

	static function pn_messenger_set_blocking($messenger,$blocking) {
		return pn_messenger_set_blocking($messenger,$blocking);
	}

	static function pn_messenger_is_passive($messenger) {
		return pn_messenger_is_passive($messenger);
	}

	static function pn_messenger_set_passive($messenger,$passive) {
		return pn_messenger_set_passive($messenger,$passive);
	}

	static function pn_messenger_free($messenger) {
		pn_messenger_free($messenger);
	}

	static function pn_messenger_errno($messenger) {
		return pn_messenger_errno($messenger);
	}

	static function pn_messenger_error($messenger) {
		return pn_messenger_error($messenger);
	}

	static function pn_messenger_get_outgoing_window($messenger) {
		return pn_messenger_get_outgoing_window($messenger);
	}

	static function pn_messenger_set_outgoing_window($messenger,$window) {
		return pn_messenger_set_outgoing_window($messenger,$window);
	}

	static function pn_messenger_get_incoming_window($messenger) {
		return pn_messenger_get_incoming_window($messenger);
	}

	static function pn_messenger_set_incoming_window($messenger,$window) {
		return pn_messenger_set_incoming_window($messenger,$window);
	}

	static function pn_messenger_start($messenger) {
		echo "\nstarting pn_messenger \n\n";
		flush();
		return pn_messenger_start($messenger);
	}

	static function pn_messenger_stop($messenger) {
		return pn_messenger_stop($messenger);
	}

	static function pn_messenger_stopped($messenger) {
		return pn_messenger_stopped($messenger);
	}

	static function pn_messenger_subscribe($messenger,$source) {
        echo "in pn_messengerr_subscribe \n\n";
	          flush();
	 
		return pn_messenger_subscribe($messenger,$source);
	}

	static function pn_subscription_get_context($sub) {
		return pn_subscription_get_context($sub);
	}

	static function pn_subscription_set_context($sub,$context) {
		pn_subscription_set_context($sub,$context);
	}

	static function pn_subscription_address($sub) {
		return pn_subscription_address($sub);
	}

	static function pn_messenger_put($messenger,$msg) {
		return pn_messenger_put($messenger,$msg);
	}

	static function pn_messenger_status($messenger,$tracker) {
		return pn_messenger_status($messenger,$tracker);
	}

	static function pn_messenger_buffered($messenger,$tracker) {
		return pn_messenger_buffered($messenger,$tracker);
	}

	static function pn_messenger_settle($messenger,$tracker,$flags) {
		return pn_messenger_settle($messenger,$tracker,$flags);
	}

	static function pn_messenger_outgoing_tracker($messenger) {
		return pn_messenger_outgoing_tracker($messenger);
	}

	static function pn_messenger_work($messenger,$timeout) {
		return pn_messenger_work($messenger,$timeout);
	}

	static function pn_messenger_interrupt($messenger) {
		return pn_messenger_interrupt($messenger);
	}

	static function pn_messenger_send($messenger,$n) {
		return pn_messenger_send($messenger,$n);
	}

	static function pn_messenger_recv($messenger,$limit) {
		return pn_messenger_recv($messenger,$limit);
	}

	static function pn_messenger_receiving($messenger) {
		return pn_messenger_receiving($messenger);
	}

	static function pn_messenger_get($messenger,$message) {
		return pn_messenger_get($messenger,$message);
	}

	static function pn_messenger_incoming_tracker($messenger) {
		return pn_messenger_incoming_tracker($messenger);
	}

	static function pn_messenger_incoming_subscription($messenger) {
		return pn_messenger_incoming_subscription($messenger);
	}

	const PN_CUMULATIVE = PN_CUMULATIVE;

	static function pn_messenger_accept($messenger,$tracker,$flags) {
		return pn_messenger_accept($messenger,$tracker,$flags);
	}

	static function pn_messenger_reject($messenger,$tracker,$flags) {
		return pn_messenger_reject($messenger,$tracker,$flags);
	}

	static function pn_messenger_outgoing($messenger) {
		return pn_messenger_outgoing($messenger);
	}

	static function pn_messenger_incoming($messenger) {
		return pn_messenger_incoming($messenger);
	}

	static function pn_messenger_route($messenger,$pattern,$address) {
		return pn_messenger_route($messenger,$pattern,$address);
	}

	static function pn_messenger_rewrite($messenger,$pattern,$address) {
		return pn_messenger_rewrite($messenger,$pattern,$address);
	}

	static function pn_messenger_selectable($messenger) {
		return pn_messenger_selectable($messenger);
	}

	static function pn_messenger_deadline($messenger) {
		return pn_messenger_deadline($messenger);
	}

	const PROTON_IO_H = PROTON_IO_H;

	const PN_INVALID_SOCKET = PN_INVALID_SOCKET;

	static function pn_io() {
		return pn_io();
	}

	static function pn_io_free($io) {
		pn_io_free($io);
	}

	static function pn_io_error($io) {
		return pn_io_error($io);
	}

	static function pn_connect($io,$host,$port) {
		return pn_connect($io,$host,$port);
	}

	static function pn_listen($io,$host,$port) {
		return pn_listen($io,$host,$port);
	}

	static function pn_accept($io,$socket,$name,$size) {
		return pn_accept($io,$socket,$name,$size);
	}

	static function pn_close($io,$socket) {
		pn_close($io,$socket);
	}

	static function pn_send($io,$socket,$buf,$size) {
		return pn_send($io,$socket,$buf,$size);
	}

	static function pn_recv($io,$socket,$buf,$size) {
		return pn_recv($io,$socket,$buf,$size);
	}

	static function pn_pipe($io,$dest) {
		return pn_pipe($io,$dest);
	}

	static function pn_read($io,$socket,$buf,$size) {
		return pn_read($io,$socket,$buf,$size);
	}

	static function pn_write($io,$socket,$buf,$size) {
		return pn_write($io,$socket,$buf,$size);
	}

	static function pn_wouldblock($io) {
		return pn_wouldblock($io);
	}

	const PROTON_SELECTABLE_H = PROTON_SELECTABLE_H;

	static function pn_selectables() {
		return pn_selectables();
	}

	static function pn_selectables_next($selectables) {
		return pn_selectables_next($selectables);
	}

	static function pn_selectables_free($selectables) {
		pn_selectables_free($selectables);
	}

	static function pn_selectable_fd($selectable) {
		return pn_selectable_fd($selectable);
	}

	static function pn_selectable_capacity($selectable) {
		return pn_selectable_capacity($selectable);
	}

	static function pn_selectable_pending($selectable) {
		return pn_selectable_pending($selectable);
	}

	static function pn_selectable_deadline($selectable) {
		return pn_selectable_deadline($selectable);
	}

	static function pn_selectable_readable($selectable) {
		pn_selectable_readable($selectable);
	}

	static function pn_selectable_writable($selectable) {
		pn_selectable_writable($selectable);
	}

	static function pn_selectable_expired($selectable) {
		pn_selectable_expired($selectable);
	}

	static function pn_selectable_is_registered($selectable) {
		return pn_selectable_is_registered($selectable);
	}

	static function pn_selectable_set_registered($selectable,$registered) {
		pn_selectable_set_registered($selectable,$registered);
	}

	static function pn_selectable_is_terminal($selectable) {
		return pn_selectable_is_terminal($selectable);
	}

	static function pn_selectable_free($selectable) {
		pn_selectable_free($selectable);
	}

	const PROTON_SSL_H = PROTON_SSL_H;

	const PN_SSL_MODE_CLIENT = 1;

	const PN_SSL_MODE_SERVER = PN_SSL_MODE_SERVER;

	const PN_SSL_RESUME_UNKNOWN = 0;

	const PN_SSL_RESUME_NEW = PN_SSL_RESUME_NEW;

	const PN_SSL_RESUME_REUSED = PN_SSL_RESUME_REUSED;

	static function pn_ssl_domain($mode) {
		return pn_ssl_domain($mode);
	}

	static function pn_ssl_domain_free($domain) {
		pn_ssl_domain_free($domain);
	}

	static function pn_ssl_domain_set_credentials($domain,$certificate_file,$private_key_file,$password) {
		return pn_ssl_domain_set_credentials($domain,$certificate_file,$private_key_file,$password);
	}

	static function pn_ssl_domain_set_trusted_ca_db($domain,$certificate_db) {
		return pn_ssl_domain_set_trusted_ca_db($domain,$certificate_db);
	}

	const PN_SSL_VERIFY_NULL = 0;

	const PN_SSL_VERIFY_PEER = PN_SSL_VERIFY_PEER;

	const PN_SSL_ANONYMOUS_PEER = PN_SSL_ANONYMOUS_PEER;

	const PN_SSL_VERIFY_PEER_NAME = PN_SSL_VERIFY_PEER_NAME;

	static function pn_ssl_domain_set_peer_authentication($domain,$mode,$trusted_CAs) {
		return pn_ssl_domain_set_peer_authentication($domain,$mode,$trusted_CAs);
	}

	static function pn_ssl_domain_allow_unsecured_client($domain) {
		return pn_ssl_domain_allow_unsecured_client($domain);
	}

	static function pn_ssl($transport) {
		return pn_ssl($transport);
	}

	static function pn_ssl_init($ssl,$domain,$session_id) {
		return pn_ssl_init($ssl,$domain,$session_id);
	}

	static function pn_ssl_get_cipher_name($ssl,$buffer,$size) {
		return pn_ssl_get_cipher_name($ssl,$buffer,$size);
	}

	static function pn_ssl_get_protocol_name($ssl,$buffer,$size) {
		return pn_ssl_get_protocol_name($ssl,$buffer,$size);
	}

	static function pn_ssl_resume_status($ssl) {
		return pn_ssl_resume_status($ssl);
	}

	static function pn_ssl_set_peer_hostname($ssl,$hostname) {
		return pn_ssl_set_peer_hostname($ssl,$hostname);
	}

	static function pn_ssl_get_peer_hostname($ssl,$hostname,$bufsize) {
		return pn_ssl_get_peer_hostname($ssl,$hostname,$bufsize);
	}

	const PROTON_CODEC_H = PROTON_CODEC_H;

	const PN_NULL = 1;

	const PN_BOOL = 2;

	const PN_UBYTE = 3;

	const PN_BYTE = 4;

	const PN_USHORT = 5;

	const PN_SHORT = 6;

	const PN_UINT = 7;

	const PN_INT = 8;

	const PN_CHAR = 9;

	const PN_ULONG = 10;

	const PN_LONG = 11;

	const PN_TIMESTAMP = 12;

	const PN_FLOAT = 13;

	const PN_DOUBLE = 14;

	const PN_DECIMAL32 = 15;

	const PN_DECIMAL64 = 16;

	const PN_DECIMAL128 = 17;

	const PN_UUID = 18;

	const PN_BINARY = 19;

	const PN_STRING = 20;

	const PN_SYMBOL = 21;

	const PN_DESCRIBED = 22;

	const PN_ARRAY = 23;

	const PN_LIST = 24;

	const PN_MAP = 25;

	static function pn_type_name($type) {
		return pn_type_name($type);
	}

	static function pn_data($capacity) {
		return pn_data($capacity);
	}

	static function pn_data_free($data) {
		pn_data_free($data);
	}

	static function pn_data_errno($data) {
		return pn_data_errno($data);
	}

	static function pn_data_error($data) {
		return pn_data_error($data);
	}

	static function pn_data_fill($data,$fmt) {
		return pn_data_fill($data,$fmt);
	}

	static function pn_data_scan($data,$fmt) {
		return pn_data_scan($data,$fmt);
	}

	static function pn_data_clear($data) {
		pn_data_clear($data);
	}

	static function pn_data_size($data) {
		return pn_data_size($data);
	}

	static function pn_data_rewind($data) {
		pn_data_rewind($data);
	}

	static function pn_data_next($data) {
		return pn_data_next($data);
	}

	static function pn_data_prev($data) {
		return pn_data_prev($data);
	}

	static function pn_data_enter($data) {
		return pn_data_enter($data);
	}

	static function pn_data_exit($data) {
		return pn_data_exit($data);
	}

	static function pn_data_lookup($data,$name) {
		return pn_data_lookup($data,$name);
	}

	static function pn_data_type($data) {
		return pn_data_type($data);
	}

	static function pn_data_print($data) {
		return pn_data_print($data);
	}

	static function pn_data_format($data,$bytes,$size) {
		return pn_data_format($data,$bytes,$size);
	}

	static function pn_data_encode($data,$bytes,$size) {
		return pn_data_encode($data,$bytes,$size);
	}

	static function pn_data_decode($data,$bytes,$size) {
		return pn_data_decode($data,$bytes,$size);
	}

	static function pn_data_put_list($data) {
		return pn_data_put_list($data);
	}

	static function pn_data_put_map($data) {
		return pn_data_put_map($data);
	}

	static function pn_data_put_array($data,$described,$type) {
		return pn_data_put_array($data,$described,$type);
	}

	static function pn_data_put_described($data) {
		return pn_data_put_described($data);
	}

	static function pn_data_put_null($data) {
		return pn_data_put_null($data);
	}

	static function pn_data_put_bool($data,$b) {
		return pn_data_put_bool($data,$b);
	}

	static function pn_data_put_ubyte($data,$ub) {
		return pn_data_put_ubyte($data,$ub);
	}

	static function pn_data_put_byte($data,$b) {
		return pn_data_put_byte($data,$b);
	}

	static function pn_data_put_ushort($data,$us) {
		return pn_data_put_ushort($data,$us);
	}

	static function pn_data_put_short($data,$s) {
		return pn_data_put_short($data,$s);
	}

	static function pn_data_put_uint($data,$ui) {
		return pn_data_put_uint($data,$ui);
	}

	static function pn_data_put_int($data,$i) {
		return pn_data_put_int($data,$i);
	}

	static function pn_data_put_char($data,$c_) {
		return pn_data_put_char($data,$c_);
	}

	static function pn_data_put_ulong($data,$ul) {
		return pn_data_put_ulong($data,$ul);
	}

	static function pn_data_put_long($data,$l) {
		return pn_data_put_long($data,$l);
	}

	static function pn_data_put_timestamp($data,$t) {
		return pn_data_put_timestamp($data,$t);
	}

	static function pn_data_put_float($data,$f) {
		return pn_data_put_float($data,$f);
	}

	static function pn_data_put_double($data,$d) {
		return pn_data_put_double($data,$d);
	}

	static function pn_data_put_decimal32($data,$d) {
		return pn_data_put_decimal32($data,$d);
	}

	static function pn_data_put_decimal64($data,$d) {
		return pn_data_put_decimal64($data,$d);
	}

	static function pn_data_put_decimal128($data,$d) {
		return pn_data_put_decimal128($data,$d);
	}

	static function pn_data_put_uuid($data,$u) {
		return pn_data_put_uuid($data,$u);
	}

	static function pn_data_put_binary($data,$bytes) {
		return pn_data_put_binary($data,$bytes);
	}

	static function pn_data_put_string($data,$string) {
		return pn_data_put_string($data,$string);
	}

	static function pn_data_put_symbol($data,$symbol) {
		return pn_data_put_symbol($data,$symbol);
	}

	static function pn_data_put_atom($data,$atom) {
		return pn_data_put_atom($data,$atom);
	}

	static function pn_data_get_list($data) {
		return pn_data_get_list($data);
	}

	static function pn_data_get_map($data) {
		return pn_data_get_map($data);
	}

	static function pn_data_get_array($data) {
		return pn_data_get_array($data);
	}

	static function pn_data_is_array_described($data) {
		return pn_data_is_array_described($data);
	}

	static function pn_data_get_array_type($data) {
		return pn_data_get_array_type($data);
	}

	static function pn_data_is_described($data) {
		return pn_data_is_described($data);
	}

	static function pn_data_is_null($data) {
		return pn_data_is_null($data);
	}

	static function pn_data_get_bool($data) {
		return pn_data_get_bool($data);
	}

	static function pn_data_get_ubyte($data) {
		return pn_data_get_ubyte($data);
	}

	static function pn_data_get_byte($data) {
		return pn_data_get_byte($data);
	}

	static function pn_data_get_ushort($data) {
		return pn_data_get_ushort($data);
	}

	static function pn_data_get_short($data) {
		return pn_data_get_short($data);
	}

	static function pn_data_get_uint($data) {
		return pn_data_get_uint($data);
	}

	static function pn_data_get_int($data) {
		return pn_data_get_int($data);
	}

	static function pn_data_get_char($data) {
		return pn_data_get_char($data);
	}

	static function pn_data_get_ulong($data) {
		return pn_data_get_ulong($data);
	}

	static function pn_data_get_long($data) {
		return pn_data_get_long($data);
	}

	static function pn_data_get_timestamp($data) {
		return pn_data_get_timestamp($data);
	}

	static function pn_data_get_float($data) {
		return pn_data_get_float($data);
	}

	static function pn_data_get_double($data) {
		return pn_data_get_double($data);
	}

	static function pn_data_get_decimal32($data) {
		return pn_data_get_decimal32($data);
	}

	static function pn_data_get_decimal64($data) {
		return pn_data_get_decimal64($data);
	}

	static function pn_data_get_decimal128($data) {
		$r=pn_data_get_decimal128($data);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_decimal128_t($r);
		}
		return $r;
	}

	static function pn_data_get_uuid($data) {
		$r=pn_data_get_uuid($data);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_uuid_t($r);
		}
		return $r;
	}

	static function pn_data_get_binary($data) {
		$r=pn_data_get_binary($data);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_bytes_t($r);
		}
		return $r;
	}

	static function pn_data_get_string($data) {
		$r=pn_data_get_string($data);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_bytes_t($r);
		}
		return $r;
	}

	static function pn_data_get_symbol($data) {
		$r=pn_data_get_symbol($data);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_bytes_t($r);
		}
		return $r;
	}

	static function pn_data_get_bytes($data) {
		$r=pn_data_get_bytes($data);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_bytes_t($r);
		}
		return $r;
	}

	static function pn_data_get_atom($data) {
		$r=pn_data_get_atom($data);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new pn_atom_t($r);
		}
		return $r;
	}

	static function pn_data_copy($data,$src) {
		return pn_data_copy($data,$src);
	}

	static function pn_data_append($data,$src) {
		return pn_data_append($data,$src);
	}

	static function pn_data_appendn($data,$src,$limit) {
		return pn_data_appendn($data,$src,$limit);
	}

	static function pn_data_narrow($data) {
		pn_data_narrow($data);
	}

	static function pn_data_widen($data) {
		pn_data_widen($data);
	}

	static function pn_data_point($data) {
		return pn_data_point($data);
	}

	static function pn_data_restore($data,$point) {
		return pn_data_restore($data,$point);
	}

	static function pn_data_dump($data) {
		pn_data_dump($data);
	}
}

/* PHP Proxy Classes */
class pn_decimal128_t {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'bytes') return pn_decimal128_t_bytes_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_cproton_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('pn_decimal128_t_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'bytes') return pn_decimal128_t_bytes_get($this->_cPtr);
		if ($var === 'thisown') return swig_cproton_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_pn_decimal128_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_pn_decimal128_t();
	}
}

class pn_uuid_t {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'bytes') return pn_uuid_t_bytes_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_cproton_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('pn_uuid_t_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'bytes') return pn_uuid_t_bytes_get($this->_cPtr);
		if ($var === 'thisown') return swig_cproton_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_pn_uuid_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_pn_uuid_t();
	}
}

class pn_bytes_t {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'size') return pn_bytes_t_size_set($this->_cPtr,$value);
		if ($var === 'start') return pn_bytes_t_start_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_cproton_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('pn_bytes_t_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'size') return pn_bytes_t_size_get($this->_cPtr);
		if ($var === 'start') return pn_bytes_t_start_get($this->_cPtr);
		if ($var === 'thisown') return swig_cproton_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_pn_bytes_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_pn_bytes_t();
	}
}

class pn_class_t {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'pn_class_t_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_cproton_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('pn_class_t_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'pn_class_t_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_cproton_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_pn_class_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_pn_class_t();
	}
}

class pn_delivery_tag_t {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'size') return pn_delivery_tag_t_size_set($this->_cPtr,$value);
		if ($var === 'bytes') return pn_delivery_tag_t_bytes_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_cproton_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('pn_delivery_tag_t_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'size') return pn_delivery_tag_t_size_get($this->_cPtr);
		if ($var === 'bytes') return pn_delivery_tag_t_bytes_get($this->_cPtr);
		if ($var === 'thisown') return swig_cproton_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_pn_delivery_tag_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_pn_delivery_tag_t();
	}
}

class pn_atom_t {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'type') return pn_atom_t_type_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_cproton_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('pn_atom_t_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'u') return new pn_atom_t_u(pn_atom_t_u_get($this->_cPtr));
		if ($var === 'type') return pn_atom_t_type_get($this->_cPtr);
		if ($var === 'thisown') return swig_cproton_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_pn_atom_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_pn_atom_t();
	}
}

class pn_atom_t_u {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'pn_atom_t_u_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_cproton_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('pn_atom_t_u_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'as_bytes') return new pn_bytes_t(pn_atom_t_u_as_bytes_get($this->_cPtr));
		if ($var === 'as_uuid') return new pn_uuid_t(pn_atom_t_u_as_uuid_get($this->_cPtr));
		if ($var === 'as_decimal128') return new pn_decimal128_t(pn_atom_t_u_as_decimal128_get($this->_cPtr));
		$func = 'pn_atom_t_u_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_cproton_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_pn_atom_t_u') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_pn_atom_t_u();
	}
}


?>
